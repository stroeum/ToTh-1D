function [alpha,Table] = alpha_eff(Ef,n_g,T_g,species,file,varargin)
%% Calculate reduced Townsend coefficients:
% [alpha,Table] = alpha_eff(Ef,n_g,T_g,species,file,varargin)
% * Ef          : ambient electric field (V/m)
% * n_g         : number density (for conversion in Td) (m^-3)
% * T_g         : neutral gas temperature (K)
% * species     : composition of the gas (name and mol fraction)
% * file        : input/ouput files
% * alpha       : Effective Townsend ionization coefficient (1/m)
% * Table       : Exhaustive table containing BOLSIG output
% * VarIntegrand: 'default', 'abs', or 'non-neg'
% * limits      : range for acceptable values of alpha and E
%                 limits = [E_min E_max ; alpha_min alpha_max];

% --- input --- %
p              = inputParser;
validationFcn  = @(x) assert(isnumeric(x));

% --- required input --- %
paramName      = 'Ef';
addRequired(p,paramName,validationFcn);
paramName      = 'n_g';
addRequired(p,paramName,validationFcn);
paramName      = 'T_g';
addRequired(p,paramName,validationFcn);
paramName      = 'species';
addRequired(p,paramName);
paramName      = 'file';
addRequired(p,paramName);

% --- optional input --- %
paramName     = 'VarIntegrand';
defaultVal    = 'default';
errorMsg      = 'Integrand variants: default, abs, and non-neg';
validationFcn = @(s) assert(ismember(s,{'default','abs','non-neg'}),errorMsg);
addParameter(p,paramName,defaultVal,validationFcn);

paramName     = 'limits';
defaultVal    = [8.2 8200 ; 0 1e7];
validationFcn = @(x) assert(all(isreal(x(:))));
addParameter(p,paramName,defaultVal,validationFcn);

parse(p, Ef, n_g, T_g, species, file, varargin{:});
% --- Format table --- %
cellVariableNames = {...
    'R',...
    'E_N',...
    'E',...
    'uxN',...
    'u_perp_xN',...
    'u_Hall_xN',...
    'u_bulk_xN',...
    'DxN',...
    'DLxN',...
    'DT_bulk_xN',...
    'DL_bulk_xN',...
    'uExN',...
    'DExN',...
    'vtot_N',...
    'vm_N',...
    'vei_N',...
    'viz_N',...
    'vat_N',...
    'alpha_N',...
    'eta_N',...
    'P_N',...
    'Pel_N',...
    'Pinel_N',...
    'P_growth_N',...
    'Pei_N',...
    'k_k',...
    'k_k_inv',...
    'K_k',...
    'Emax',...
    'iter',...
    'grid'};

%% Column description
cellVariableDescriptions = {...
    'Run #',...
    'Reduced electric field E/N',...
    'Mean energy',...
    'Mobility *N ',...
    'Real or perpendicular mobility *N',...
    'Imaginary or Hall mobility *N',...
    'Bulk mobility *N',...
    'Diffusion coefficient *N',...
    'Longitudinal diffusion coefficient *N',...
    'Bulk T diffusion coefficient *N',...
    'Bulk L diffusion coefficient *N',...
    'Energy mobility *N',...
    'Energy diffusion coef. D*N',...
    'Total collision freq. /N',...
    'Momentum frequency /N',...
    'e-i momentum frequency /N',...
    'Total ionization freq. /N',...
    'Total attachment freq. /N',...
    'Townsend ioniz. coef. alpha/N',...
    'Townsend attach. coef. eta/N',...
    'Power /N',...
    'Elastic power loss /N',...
    'Inelastic power loss /N',...
    'Growth power /N',...
    'e-i power loss /N',...
    'Rate coefficients',...
    'Inverse rate coefficients',...
    'Energy loss coefficients',...
    'Maximum energy',...
    '# of iterations',...
    '# of grid trials'...
    };

%% Column units
cellVariableUnits = {...
    '()',...
    '(Td)',...
    '(eV)',...
    '(1/m/V/s)',...
    '(1/m/V/s)',...
    '(1/m/V/s)',...
    '(1/m/V/s)',...
    '(1/m/s)',...
    '(1/m/s)',...
    '(1/m/s)',...
    '(1/m/s)',...
    '(1/m/V/s)',...
    '(1/m/s)',...
    '(m3/s)',...
    '(m3/s)',...
    '(m3/s)',...
    '(m3/s)',...
    '(m3/s)',...
    '(m2)',...
    '(m2)',...
    '(eV m3/s)',...
    '(eV m3/s)',...
    '(eV m3/s)',...
    '(eV m3/s)',...
    '(eV m3/s)',...
    '(m3/s)',...
    '(m3/s)',...
    '(eV m3/s)',...
    '(eV)',...
    '()',...
    '()'...
    };

N_el                                  = numel(Ef);
alpha                                 = zeros(N_el, 1);
Table                                 = table('Size',[N_el 31],...
    'VariableTypes',{...
    'double','double','double','double','double','double','double',...
    'double','double','double','double','double','double','double',...
    'double','double','double','double','double','double','double',...
    'double','double','double','double','double','double','double',...
    'double','double','double'});
Table.Properties.VariableNames        = cellVariableNames;
Table.Properties.VariableDescriptions = cellVariableDescriptions;
Table.Properties.VariableUnits        = cellVariableUnits;

% --- Setup gas mixture --- %
editBOLSIGinput('GasMixture',species,file);
editBOLSIGinput('Tg',T_g,file);

for i=1:N_el
    % --- Convert V/m to Td --- %
    E_Td = convert2Td(Ef(i),n_g);
%     disp(['E = ',num2str(E_Td),' Td']);

    if E_Td <= p.Results.limits(2,1)
        disp('E (Td) negative.')
        %warning('E (Td) negative.')
        alpha(i)   = p.Results.limits(2,1);
    elseif E_Td > p.Results.limits(1,2)
        disp('E (Td) likely too large.')
        %warning('E (Td) likely too large.')
        alpha(i)   = p.Results.limits(2,2);
    else
%         disp(['(',num2str(i,'%3i'),'/',num2str(N_el),'): E = ',num2str(E_Td),' Td']);
        editBOLSIGinput('E',E_Td,file);
        
        % --- Run bolsig --- %
        % t = datetime('now','TimeZone','local','Format','HH:mm:ss');
        % disp([datestr(t,'HH:mm:ss'),' ',cmd]);
        str = computer;
        if strcmp(str,'PCWIN64')
            cmd = ['bolsigminus.exe ', file.input];
        else
            cmd = ['./bolsigminus ', file.input];
        end
        [~,cmdout] = system(cmd);
        if strlength(cmdout)~=0
            disp(cmdout)
            warning('BOLSIG output error.')
            
        end
        
        % --- Read output --- %
        Table(i,:) = readBOLSIGoutput(file.output);
        alpha(i)   = (Table.alpha_N(i)-Table.eta_N(i))*n_g;
    end
end
%disp([num2str(E),' ',num2str(alpha_eff)]);
if (nargin==6)
    if strcmp(p.Results.VarIntegrand,'abs')
        alpha = abs(alpha);
    elseif strcmp(p.Results.VarIntegrand,'non-neg')
        alpha = (alpha>0).*alpha;
    end
end
end